[Generator - REST Summary - datamodels]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-datamodels splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="datamodels", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_datamodels

[Generator - REST Summary - eventtypes]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-eventtypes splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="eventtypes", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_eventtypes

[Generator - REST Summary - indexes]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-indexes splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="indexes", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_indexes

[Generator - REST Summary - lookups]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/data/lookup-table-files splunk_server=local\
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| fields instance title author eai:acl.app eai:acl.perms.read eai:acl.perms.write eai:acl.sharing eai:acl.sharing updated\
| rename eai:acl.* as * eai:* as *\
| rename perms.* as *\
| eval _time=now(), "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields - read write\
| collect index=rest_summary source=rest_lookups

[Generator - REST Summary - macros]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-macros splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="macros", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_macros

[Generator - REST Summary - props]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-props splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="props", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_props

[Generator - REST Summary - savedsearches]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/saved/searches splunk_server=local  \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="savedsearches", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write next_scheduled_time\
| collect index=rest_summary source=rest_conf_savedsearches

[Generator - REST Summary - tags]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-tags splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="tags", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_tags

[Generator - REST Summary - transforms]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-transforms splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* \
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza app \
| rename perms.* as *\
| eval _time=now(), conf="transforms", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_transforms

[Generator - REST Summary - views]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/data/ui/views splunk_server=local\
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| fields instance label eai:acl.app eai:acl.perms.read eai:acl.perms.write eai:acl.sharing eai:acl.sharing eai:data updated\
| rename eai:acl.* as * eai:* as *\
| rename perms.* as *\
| eval _time=now(), "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields - read write\
| eval xml_length=len(data)\
| collect index=rest_summary source=rest_views

[Generator - REST Summary - authorize]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-authorize splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* stanza!=capability*\
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza sharing\
| rename perms.* as *\
| eval _time=now(), conf="authorize", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_authorize

[Generator - REST Summary - authentication]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3 1 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest servicesNS/-/-/configs/conf-authentication splunk_server=local \
| rename eai:acl.* as * title as stanza \
| search app!=1* app!=0* stanza!=splunk_auth stanza!=secrets stanza!=cacheTiming\
| lookup host_dns_alt_name.csv host OUTPUT dns_alt_name \
| eval instance=if(isnotnull(dns_alt_name), dns_alt_name, splunk_server) \
| stats values(*) as * by stanza sharing\
| rename perms.* as *\
| eval _time=now(), conf="authentication", "perms.read"=if(read=="*", "everyone", read), "perms.write"=if(read=="*", "everyone", write)\
| fields instance conf stanza app perms.read perms.write sharing *\
| fields - read write\
| collect index=rest_summary source=rest_conf_authentication
